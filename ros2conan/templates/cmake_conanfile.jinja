from conan import ConanFile
from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout, CMakeDeps
from conan.tools.scm import Git
import os


class {{package_name}}Recipe(ConanFile):
    name = "{{ name }}"
    version = "{{ version }}"

    # Optional metadata
    license = "{{ license }}"
    author = "{{ author }}"
    url = "{{ url }}"
    description = "{{ description }}"

    # Binary configuration
    settings = "os", "compiler", "build_type", "arch"
    options = {"shared": [True, False], "fPIC": [True, False]}
    default_options = {"shared": False, "fPIC": True}

    def export_sources(self):
        export_conandata_patches(self)

    def config_options(self):
        if self.settings.os == "Windows":
            self.options.rm_safe("fPIC")

    def configure(self):
        if self.options.shared:
            self.options.rm_safe("fPIC")

    def source(self):
        git = Git(self)
        git.clone(url=self.conan_data["sources"][self.version]["url"], target="tmp")
        git.folder = "tmp"
        git.checkout(commit=self.conan_data["sources"][self.version]["ref"])

    def layout(self):
        cmake_layout(self)

    def generate(self):
        deps = CMakeDeps(self)
        deps.generate()
        tc = CMakeToolchain(self)
        tc.generate()

    {% if requirements is defined -%}
    def requirements(self):
        {% for require in requirements -%}
        self.requires("{{ require.name }}/{{  require.version }}"{{ ', transitive_headers={}'.format(require.transitive_headers) if require.transitive_headers is not none else '' }}{{ ', transitive_libs={}'.format(require.transitive_libs) if require.transitive_libs is not none else '' }})
        {% endfor %}
    {%- endif %}

    {% if build_requirements is defined -%}
    def build_requirements(self):
        {% for require in build_requirements.tool_requires -%}
        self.tool_requires("{{ require.name }}/{{  require.version }}")
        {% endfor %}
        {% for require in build_requirements.test_requires -%}
        self.test_requires("{{ require.name }}/{{  require.version }}")
        {% endfor %}
    {%- endif %}

    def build(self):
        build_subdir = os.path.join(self.build_folder, "tmp")
        with os.scandir(build_subdir):
          os.chdir(build_subdir)
          cmake = CMake(self)
          cmake.configure()
          cmake.build()

    def package(self):
        cmake = CMake(self)
        cmake.install()

    def package_info(self):
        self.cpp_info.libs = ["{{ name }}"]

        self.cpp_info.set_property("cmake_find_mode", "none")
        self.cpp_info.builddirs.append("")
        
        self.buildenv_info.prepend_path("AMENT_PREFIX_PATH", self.package_folder)
        self.runenv_info.prepend_path("AMENT_PREFIX_PATH", self.package_folder)




